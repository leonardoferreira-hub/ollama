#!/usr/bin/env python3
"""
Script completo para extrair e catalogar cl√°usulas dos documentos GOLD
"""
import json
from docx import Document
from pathlib import Path
import re

def extrair_estrutura_completa(caminho_docx):
    """Extrai a estrutura completa do documento incluindo estilos"""
    doc = Document(caminho_docx)
    estrutura = []
    
    for i, para in enumerate(doc.paragraphs):
        if para.text.strip():
            estrutura.append({
                'indice': i,
                'texto': para.text.strip(),
                'estilo': para.style.name if para.style else 'Normal',
                'nivel': para.style.name.replace('Heading ', '') if 'Heading' in para.style.name else None
            })
    
    # Tabelas
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                if cell.text.strip():
                    estrutura.append({
                        'indice': len(estrutura),
                        'texto': cell.text.strip(),
                        'estilo': 'Tabela',
                        'nivel': None
                    })
    
    return estrutura

def processar_clausulas_detalhadas(estrutura):
    """Processa e identifica todas as cl√°usulas com mais precis√£o"""
    clausulas = []
    
    # Padr√µes mais abrangentes
    padroes = [
        re.compile(r'^(\d+)\.\s+([A-Z][^.]+)'),  # 1. T√çTULO
        re.compile(r'^(\d+\.\d+)\.\s+(.+)'),      # 1.1. Subt√≠tulo
        re.compile(r'^(\d+\.\d+\.\d+)\.\s+(.+)'), # 1.1.1. Sub-subt√≠tulo
        re.compile(r'^Cl√°usula\s+(\d+[a-z]?)\s*[-‚Äì]\s*(.+)', re.IGNORECASE),
        re.compile(r'^CL√ÅUSULA\s+(\d+[a-z]?)\s*[-‚Äì]\s*(.+)', re.IGNORECASE),
        re.compile(r'^([A-Z\s]{3,})\s*$'),  # T√çTULOS EM MAI√öSCULAS
        re.compile(r'^Se√ß√£o\s+(\d+[a-z]?)\s*[-‚Äì]\s*(.+)', re.IGNORECASE),
    ]
    
    clausula_atual = None
    conteudo_linhas = []
    ultimo_numero = None
    
    for item in estrutura:
        texto = item['texto']
        encontrou_clausula = False
        
        # Tenta cada padr√£o
        for padrao in padroes:
            match = padrao.match(texto)
            if match:
                # Salva a cl√°usula anterior
                if clausula_atual:
                    clausulas.append({
                        'numero': clausula_atual['numero'],
                        'titulo': clausula_atual['titulo'],
                        'conteudo': '\n'.join(conteudo_linhas),
                        'tipo': clausula_atual.get('tipo', 'clausula'),
                        'nivel': clausula_atual.get('nivel')
                    })
                    conteudo_linhas = []
                
                # Nova cl√°usula
                if len(match.groups()) >= 2:
                    numero = match.group(1)
                    titulo = match.group(2) if len(match.groups()) >= 2 else texto
                else:
                    numero = f"TITULO_{len(clausulas)+1}"
                    titulo = match.group(1) if match.groups() else texto
                
                clausula_atual = {
                    'numero': numero,
                    'titulo': titulo.strip(),
                    'tipo': 'titulo' if texto.isupper() else 'clausula',
                    'nivel': item.get('nivel')
                }
                ultimo_numero = numero
                encontrou_clausula = True
                break
        
        if not encontrou_clausula and clausula_atual:
            # Adiciona ao conte√∫do da cl√°usula atual
            if texto and texto != clausula_atual['titulo']:
                conteudo_linhas.append(texto)
        elif not encontrou_clausula and not clausula_atual:
            # Conte√∫do antes da primeira cl√°usula
            if texto.strip():
                conteudo_linhas.append(texto)
    
    # Adiciona a √∫ltima cl√°usula
    if clausula_atual:
        clausulas.append({
            'numero': clausula_atual['numero'],
            'titulo': clausula_atual['titulo'],
            'conteudo': '\n'.join(conteudo_linhas),
            'tipo': clausula_atual.get('tipo', 'clausula'),
            'nivel': clausula_atual.get('nivel')
        })
    
    return clausulas

def gerar_catalogo_sugestoes(clausulas, nome_doc):
    """Gera cat√°logo com sugest√µes de explica√ß√£o para cada cl√°usula"""
    catalogo = {
        'documento': nome_doc,
        'total_clausulas': len(clausulas),
        'data_analise': '2025-10-28',
        'clausulas_com_sugestoes': []
    }
    
    # Dicion√°rio de sugest√µes baseado no tipo de cl√°usula
    sugestoes_padrao = {
        'DEFINI√á√ïES': 'Esta cl√°usula estabelece os termos e defini√ß√µes utilizados ao longo do documento, garantindo interpreta√ß√£o uniforme.',
        'APROVA√á√ÉO': 'Define os procedimentos e requisitos para aprova√ß√£o da emiss√£o dos certificados.',
        'OBJETO': 'Descreve o objeto principal do termo e os cr√©ditos imobili√°rios que lastreiam os CRI.',
        'IDENTIFICA√á√ÉO': 'Identifica os CRI emitidos, suas caracter√≠sticas e forma de distribui√ß√£o.',
        'SUBSCRI√á√ÉO': 'Estabelece as regras para subscri√ß√£o e integraliza√ß√£o dos certificados.',
        'REMUNERA√á√ÉO': 'Define a forma de remunera√ß√£o, atualiza√ß√£o monet√°ria e c√°lculo de juros dos CRI.',
        'VENCIMENTO': 'Estabelece as hip√≥teses e procedimentos de vencimento antecipado.',
        'ASSEMBLEIA': 'Regula a convoca√ß√£o e funcionamento das assembleias de titulares de CRI.',
        'OBRIGA√á√ïES': 'Lista as obriga√ß√µes e declara√ß√µes da emissora perante os titulares.',
        'RESGATE': 'Define as condi√ß√µes e procedimentos para resgate antecipado dos CRI.',
        'AGENTE FIDUCI√ÅRIO': 'Estabelece as atribui√ß√µes, responsabilidades e remunera√ß√£o do agente fiduci√°rio.',
        'AMORTIZA√á√ÉO': 'Define o cronograma e procedimentos de amortiza√ß√£o dos certificados.',
        'GARANTIAS': 'Descreve as garantias constitu√≠das em favor dos titulares dos CRI.',
        'EVENTOS': 'Lista os eventos de vencimento antecipado e suas consequ√™ncias.',
        'COMUNICA√á√ïES': 'Estabelece os procedimentos para comunica√ß√µes entre as partes.',
        'FORO': 'Define o foro competente para dirimir conflitos relacionados ao documento.',
    }
    
    for clausula in clausulas:
        # Gera sugest√£o de explica√ß√£o
        titulo_upper = clausula['titulo'].upper()
        sugestao = None
        
        # Busca por palavras-chave no t√≠tulo
        for palavra_chave, explicacao in sugestoes_padrao.items():
            if palavra_chave in titulo_upper:
                sugestao = explicacao
                break
        
        # Sugest√£o gen√©rica se n√£o encontrar espec√≠fica
        if not sugestao:
            if clausula.get('tipo') == 'titulo':
                sugestao = f"Se√ß√£o que trata de {clausula['titulo'].lower()}."
            else:
                sugestao = f"Cl√°usula que regula aspectos relacionados a {clausula['titulo'].lower()}."
        
        # An√°lise de conte√∫do para melhorar sugest√£o
        conteudo = clausula['conteudo'].lower()
        if len(conteudo) > 100:
            if 'dever√°' in conteudo or 'obriga' in conteudo:
                sugestao += ' Estabelece obriga√ß√µes espec√≠ficas.'
            if 'poder√°' in conteudo or 'faculdade' in conteudo:
                sugestao += ' Confere faculdades e direitos.'
            if 'vedado' in conteudo or 'proibido' in conteudo:
                sugestao += ' Imp√µe restri√ß√µes e limita√ß√µes.'
            if 'prazo' in conteudo:
                sugestao += ' Especifica prazos importantes.'
            if 'comunicar' in conteudo or 'notificar' in conteudo:
                sugestao += ' Requer comunica√ß√µes obrigat√≥rias.'
        
        catalogo['clausulas_com_sugestoes'].append({
            'numero': clausula['numero'],
            'titulo': clausula['titulo'],
            'tipo': clausula.get('tipo', 'clausula'),
            'nivel': clausula.get('nivel'),
            'preview_conteudo': clausula['conteudo'][:200] + '...' if len(clausula['conteudo']) > 200 else clausula['conteudo'],
            'tamanho_conteudo': len(clausula['conteudo']),
            'sugestao_explicacao': sugestao,
            'pontos_atencao': extrair_pontos_atencao(clausula['conteudo'])
        })
    
    return catalogo

def extrair_pontos_atencao(conteudo):
    """Extrai pontos de aten√ß√£o do conte√∫do da cl√°usula"""
    pontos = []
    conteudo_lower = conteudo.lower()
    
    palavras_chave = {
        'prazo': 'Cont√©m especifica√ß√£o de prazos',
        'vencimento': 'Define condi√ß√µes de vencimento',
        'garantia': 'Menciona garantias',
        'penalidade': 'Estabelece penalidades',
        'multa': 'Prev√™ aplica√ß√£o de multas',
        'juros': 'Especifica taxas de juros',
        'mora': 'Regula situa√ß√µes de mora',
        'inadimplemento': 'Trata de inadimplemento',
        'rescis√£o': 'Prev√™ hip√≥teses de rescis√£o',
        'assembleia': 'Requer aprova√ß√£o em assembleia',
        'maioria': 'Define qu√≥rum necess√°rio',
        'notifica√ß√£o': 'Exige notifica√ß√£o pr√©via',
        'comunica√ß√£o': 'Requer comunica√ß√£o √†s partes',
        'registro': 'Necessita registro',
        'publica√ß√£o': 'Requer publica√ß√£o',
    }
    
    for palavra, descricao in palavras_chave.items():
        if palavra in conteudo_lower:
            pontos.append(descricao)
    
    return pontos if pontos else ['Revisar conte√∫do completo da cl√°usula']

def main():
    """Fun√ß√£o principal"""
    print("="*80)
    print("EXTRA√á√ÉO COMPLETA DE CL√ÅUSULAS - DOCUMENTOS GOLD")
    print("="*80)
    
    documentos = [
        ('GOLD_CRI_DESTINACAO_MODELO_2025.docx', 'CRI com Destina√ß√£o - Modelo 2025'),
        ('GOLD_CRI_SEM_DESTINACAO_PADRAO.docx', 'CRI sem Destina√ß√£o - Padr√£o')
    ]
    
    for doc, nome in documentos:
        print(f"\n\n{'='*80}")
        print(f"üìÑ Processando: {nome}")
        print(f"{'='*80}\n")
        
        caminho = f'/home/user/webapp/documentos_gold/{doc}'
        if not Path(caminho).exists():
            print(f"‚ö† Arquivo n√£o encontrado: {caminho}")
            continue
        
        # Extrai estrutura
        print("1. Extraindo estrutura do documento...")
        estrutura = extrair_estrutura_completa(caminho)
        print(f"   ‚úì {len(estrutura)} elementos extra√≠dos")
        
        # Processa cl√°usulas
        print("2. Identificando cl√°usulas...")
        clausulas = processar_clausulas_detalhadas(estrutura)
        print(f"   ‚úì {len(clausulas)} cl√°usulas identificadas")
        
        # Gera cat√°logo com sugest√µes
        print("3. Gerando cat√°logo com sugest√µes de explica√ß√£o...")
        catalogo = gerar_catalogo_sugestoes(clausulas, nome)
        
        # Salva arquivos
        base_nome = Path(caminho).stem
        
        # Arquivo completo JSON
        arquivo_json = f'/home/user/webapp/documentos_gold/{base_nome}_catalogo_completo.json'
        with open(arquivo_json, 'w', encoding='utf-8') as f:
            json.dump(catalogo, f, ensure_ascii=False, indent=2)
        print(f"   ‚úì Cat√°logo salvo: {base_nome}_catalogo_completo.json")
        
        # Arquivo resumido markdown
        arquivo_md = f'/home/user/webapp/documentos_gold/{base_nome}_CATALOGO.md'
        with open(arquivo_md, 'w', encoding='utf-8') as f:
            f.write(f"# Cat√°logo de Cl√°usulas - {nome}\n\n")
            f.write(f"**Data de An√°lise:** 2025-10-28\n\n")
            f.write(f"**Total de Cl√°usulas:** {len(clausulas)}\n\n")
            f.write("---\n\n")
            
            for i, item in enumerate(catalogo['clausulas_com_sugestoes'], 1):
                f.write(f"## {i}. Cl√°usula {item['numero']}\n\n")
                f.write(f"**T√≠tulo:** {item['titulo']}\n\n")
                f.write(f"**Tipo:** {item['tipo']}\n\n")
                f.write(f"### üìù Sugest√£o de Explica√ß√£o\n\n")
                f.write(f"{item['sugestao_explicacao']}\n\n")
                
                if item['pontos_atencao']:
                    f.write(f"### ‚ö†Ô∏è Pontos de Aten√ß√£o\n\n")
                    for ponto in item['pontos_atencao']:
                        f.write(f"- {ponto}\n")
                    f.write("\n")
                
                f.write(f"### üìÑ Preview do Conte√∫do\n\n")
                f.write(f"```\n{item['preview_conteudo']}\n```\n\n")
                f.write(f"**Tamanho do conte√∫do:** {item['tamanho_conteudo']} caracteres\n\n")
                f.write("---\n\n")
        
        print(f"   ‚úì Cat√°logo markdown salvo: {base_nome}_CATALOGO.md")
        
        # Mostra resumo
        print(f"\nüìä RESUMO:")
        print(f"   ‚Ä¢ Total de cl√°usulas: {len(clausulas)}")
        print(f"   ‚Ä¢ Cl√°usulas principais: {sum(1 for c in clausulas if c.get('tipo') == 'clausula')}")
        print(f"   ‚Ä¢ T√≠tulos/Se√ß√µes: {sum(1 for c in clausulas if c.get('tipo') == 'titulo')}")
    
    print("\n\n" + "="*80)
    print("‚úÖ AN√ÅLISE CONCLU√çDA COM SUCESSO!")
    print("="*80)
    print("\nüìÅ Arquivos gerados:")
    print("   ‚Ä¢ *_catalogo_completo.json - Dados completos em JSON")
    print("   ‚Ä¢ *_CATALOGO.md - Cat√°logo formatado em Markdown")
    print("\nPr√≥ximos passos:")
    print("   1. Revisar os cat√°logos gerados")
    print("   2. Ajustar sugest√µes de explica√ß√£o conforme necess√°rio")
    print("   3. Integrar com sistema de revis√£o de documentos")

if __name__ == '__main__':
    main()
