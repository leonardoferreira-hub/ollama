"""
Script para gerar explica√ß√µes autom√°ticas para todas as cl√°usulas do cat√°logo
usando Gemini AI
"""

import yaml
import google.generativeai as genai
import time
from datetime import datetime
import os
import sys

def gerar_explicacao_clausula(titulo, categoria, keywords, template, api_key):
    """Gera explica√ß√£o detalhada para uma cl√°usula"""
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel('gemini-2.0-flash-exp')
    
    keywords_str = ', '.join(keywords[:10]) if keywords else 'N/A'
    template_preview = template[:800] if template else 'N/A'
    
    prompt = f"""Voc√™ √© um especialista em documentos jur√≠dicos de Certificados de Receb√≠veis Imobili√°rios (CRI).

TAREFA: Gerar uma explica√ß√£o DETALHADA e PR√ÅTICA do que a seguinte cl√°usula deve conter em um Termo de Securitiza√ß√£o de CRI.

CL√ÅUSULA:
T√≠tulo: {titulo}
Categoria: {categoria}
Keywords: {keywords_str}

TEMPLATE/CONTEXTO:
{template_preview}

INSTRU√á√ïES OBRIGAT√ìRIAS:
1. Descreva EXATAMENTE o que esta cl√°usula deve conter
2. Liste TODOS os elementos ESSENCIAIS que devem aparecer
3. Mencione informa√ß√µes OBRIGAT√ìRIAS por lei (Resolu√ß√£o CVM 60/2021, Lei 14.430/2022)
4. D√™ EXEMPLOS CONCRETOS de texto esperado
5. Mencione o que N√ÉO confundir (se relevante)
6. Seja ESPEC√çFICO sobre formato, estrutura e conte√∫do

FORMATO DA RESPOSTA:
- Use portugu√™s claro e objetivo
- Use bullets/listas para organizar
- Inclua exemplos pr√°ticos
- Mencione obrigatoriedade legal quando aplic√°vel
- Seja completo mas conciso (m√°ximo 500 palavras)

N√ÉO repita apenas o t√≠tulo. Seja MUITO ESPEC√çFICO sobre o conte√∫do esperado.

EXPLICA√á√ÉO DETALHADA:"""

    try:
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        print(f"‚ùå Erro ao gerar explica√ß√£o: {str(e)}")
        return f"[Erro ao gerar: {str(e)}]"


def processar_catalogo(catalog_file, api_key, dry_run=False):
    """Processa um cat√°logo completo gerando explica√ß√µes"""
    
    print(f"\n{'='*80}")
    print(f"üìÇ Processando: {catalog_file}")
    print(f"{'='*80}\n")
    
    # Carrega cat√°logo
    with open(catalog_file, 'r', encoding='utf-8') as f:
        catalog = yaml.safe_load(f)
    
    clausulas = catalog.get('clausulas', [])
    total = len(clausulas)
    
    print(f"Total de cl√°usulas: {total}")
    print(f"Dry run: {'SIM (n√£o vai salvar)' if dry_run else 'N√ÉO (vai salvar)'}")
    print()
    
    # Processa cada cl√°usula
    modificadas = 0
    puladas = 0
    erros = 0
    
    for idx, clausula in enumerate(clausulas, 1):
        clausula_id = clausula.get('id', 'SEM_ID')
        titulo = clausula.get('titulo', 'Sem t√≠tulo')
        explicacao_atual = clausula.get('explicacao', '')
        
        print(f"\n[{idx}/{total}] {clausula_id}: {titulo[:60]}...")
        
        # Se j√° tem explica√ß√£o longa, pula
        if explicacao_atual and len(explicacao_atual.strip()) > 100:
            print(f"  ‚è≠Ô∏è  J√° tem explica√ß√£o ({len(explicacao_atual)} chars) - pulando")
            puladas += 1
            continue
        
        # Gera explica√ß√£o
        print(f"  ü§ñ Gerando explica√ß√£o com Gemini AI...")
        
        try:
            explicacao = gerar_explicacao_clausula(
                titulo=titulo,
                categoria=clausula.get('categoria', 'outros'),
                keywords=clausula.get('keywords', []),
                template=clausula.get('template', ''),
                api_key=api_key
            )
            
            if explicacao and not explicacao.startswith('[Erro'):
                clausula['explicacao'] = explicacao
                modificadas += 1
                print(f"  ‚úÖ Gerada ({len(explicacao)} chars)")
                
                # Preview
                preview = explicacao[:150].replace('\n', ' ')
                print(f"  üí¨ Preview: {preview}...")
            else:
                erros += 1
                print(f"  ‚ùå Erro na gera√ß√£o")
            
            # Rate limiting - aguarda 6 segundos entre requests (10 RPM)
            if idx < total:
                time.sleep(6)
                
        except Exception as e:
            erros += 1
            print(f"  ‚ùå Exce√ß√£o: {str(e)}")
    
    # Salva cat√°logo atualizado
    if not dry_run and modificadas > 0:
        print(f"\nüíæ Salvando cat√°logo...")
        
        # Atualiza metadata
        catalog['metadata']['data_atualizacao'] = datetime.now().strftime('%Y-%m-%d')
        
        # Backup
        backup_file = catalog_file.replace('.yaml', f'_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.yaml')
        with open(backup_file, 'w', encoding='utf-8') as f:
            yaml.dump(catalog, f, allow_unicode=True, sort_keys=False, default_flow_style=False)
        print(f"  üì¶ Backup criado: {backup_file}")
        
        # Salva original
        with open(catalog_file, 'w', encoding='utf-8') as f:
            yaml.dump(catalog, f, allow_unicode=True, sort_keys=False, default_flow_style=False)
        print(f"  ‚úÖ Cat√°logo salvo: {catalog_file}")
    
    # Resumo
    print(f"\n{'='*80}")
    print(f"üìä RESUMO")
    print(f"{'='*80}")
    print(f"Total de cl√°usulas:      {total}")
    print(f"‚úÖ Modificadas:          {modificadas}")
    print(f"‚è≠Ô∏è  Puladas (j√° tinham): {puladas}")
    print(f"‚ùå Erros:                {erros}")
    print(f"{'='*80}\n")
    
    return modificadas


if __name__ == "__main__":
    # API Key
    api_key = os.getenv("GEMINI_API_KEY")
    
    if not api_key:
        print("‚ùå ERRO: Configure a vari√°vel de ambiente GEMINI_API_KEY")
        print("   export GEMINI_API_KEY='sua-chave-aqui'")
        sys.exit(1)
    
    print("üöÄ GERADOR AUTOM√ÅTICO DE EXPLICA√á√ïES DE CAT√ÅLOGO")
    print("="*80)
    print("Este script vai gerar explica√ß√µes detalhadas para cada cl√°usula")
    print("dos cat√°logos usando Gemini AI.")
    print("="*80)
    
    # Processa cat√°logos
    catalogos = [
        "data/catalogos/catalogo_cri_destinacao.yaml",
        "data/catalogos/catalogo_cri_sem_destinacao.yaml"
    ]
    
    total_modificadas = 0
    
    for catalogo in catalogos:
        if os.path.exists(catalogo):
            mods = processar_catalogo(catalogo, api_key, dry_run=False)
            total_modificadas += mods
        else:
            print(f"‚ö†Ô∏è  Cat√°logo n√£o encontrado: {catalogo}")
    
    print(f"\n‚úÖ CONCLU√çDO! Total de explica√ß√µes geradas: {total_modificadas}")
    print(f"üìù Os cat√°logos foram atualizados e backups foram criados.")
    print(f"üéØ Agora voc√™ pode revisar e editar as explica√ß√µes na interface do Streamlit.")

